<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Middle of Nowhere</title><link>/posts/</link><description>Recent content in Posts on Middle of Nowhere</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 11 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Wasm the Hard Way: Porting the Chicory Compiler to Android</title><link>/posts/2025/07/11/wasm-the-hard-way-porting-the-chicory-compiler-to-android/</link><pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate><guid>/posts/2025/07/11/wasm-the-hard-way-porting-the-chicory-compiler-to-android/</guid><description>&lt;p>I am resurrecting my old &lt;a href="/tags/wasm/">&amp;ldquo;Wasm the Hard Way&amp;rdquo;&lt;/a> series with some fresh new content about a recent project I have been working on: porting the &lt;a href="https://chicory.dev" target="_blank" rel="noopener">Chicory&lt;/a> Wasm compiler to Android.&lt;/p>
&lt;p>If you are interested in Wasm and Java, you might have heard about &lt;a href="https://chicory.dev" target="_blank" rel="noopener">Chicory&lt;/a>, a pure-Java Wasm runtime. Ever since I started working at &lt;a href="https://dylibso.com" target="_blank" rel="noopener">Dylibso&lt;/a>, I have been contributing to the project.&lt;/p>
&lt;p>&lt;a href="https://extism.org" target="_blank" rel="noopener">Extism&lt;/a> is Dylibso&amp;rsquo;s family of open-source projects to develop and host WebAssembly (Wasm) plugins. Going forward, we believe the &lt;a href="https://github.com/extism/chicory-sdk" target="_blank" rel="noopener">Chicory SDK&lt;/a> is a solid foundation for running Wasm modules in Java applications, making it our default Wasm runtime for Extism on the Java platform. We&amp;rsquo;re putting our money where our mouth is: the &lt;a href="https://github.com/dylibso/mcpx4j" target="_blank" rel="noopener">mcpx4j&lt;/a> library for running &lt;a href="https://www.mcp.run" target="_blank" rel="noopener">mcp.run servlets&lt;/a> is built on top of the Chicory SDK.&lt;/p></description></item><item><title>Wasm 4 the Java Geek 3: Electric Boogaloo</title><link>/posts/2024/12/18/wasm-4-the-java-geek-3-electric-boogaloo/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>/posts/2024/12/18/wasm-4-the-java-geek-3-electric-boogaloo/</guid><description>&lt;p>&lt;p class="markdown-image">
 &lt;img src="https://i0.wp.com/www.javaadvent.com/content/uploads/2024/12/wasm-4-java-geek-3.jpg?w=1292&amp;amp;ssl=1" alt="" />
&lt;/p>&lt;/p>
&lt;div style="padding: 1em; background: #eee">
&lt;b>Update (Jun 20, 2025)&lt;/b>. This post was originally published at &lt;a href="https://www.javaadvent.com/2024/12/wasm-4-the-java-geek-3-electric-boogaloo.html">JVM Advent&lt;/a>.
&lt;/div>
&lt;p>And here we are again. For the third time in a row, we are back to the Java Advent, eager to discover what’s new with WebAssembly from a Java developer perspective.&lt;/p>
&lt;p>Incidentally, since, as you know, I have a &lt;a href="https://www.javaadvent.com/2023/12/a-return-to-webassembly-for-the-java-geek.html#:~:text=WHAT%20HAS%20CHANGED%20SINCE%20LAST%20TIME%3F" target="_blank" rel="noopener">favorite topic&lt;/a> (after programming languages and compilers, of course), it is also the &lt;strong>third time in a row&lt;/strong> I have worked at a different company.&lt;/p></description></item><item><title>A Return to WebAssembly for the Java Geek</title><link>/posts/2023/12/05/a-return-to-webassembly-for-the-java-geek/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/2023/12/05/a-return-to-webassembly-for-the-java-geek/</guid><description>&lt;p>&lt;a href="https://i0.wp.com/www.javaadvent.com/content/uploads/2023/11/java-geek-wasm-2.png?ssl=1" target="_blank" rel="noopener">&lt;p class="markdown-image">
 &lt;img src="https://i0.wp.com/www.javaadvent.com/content/uploads/2023/11/java-geek-wasm-2.png?resize=600%2C369&amp;amp;ssl=1" alt="" />
&lt;/p>&lt;/a>&lt;/p>
&lt;div style="padding: 1em; background: #eee">
&lt;b>Update (Jun 20, 2025)&lt;/b>. This post was originally published at &lt;a href="https://www.javaadvent.com/2023/12/a-return-to-webassembly-for-the-java-geek.html">JVM Advent&lt;/a>.
&lt;/div>
&lt;p>Welcome back, my dear &lt;strong>Java Geek!&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html" target="_blank" rel="noopener">Last year we compared WebAssembly and discussed in what ways it differs from the JVM&lt;/a>. A lot of things have happened in the meantime. If you want to dive deeper into that kind of detail, I warmly suggest reading &lt;a href="https://www.neversaw.us/2023/05/10/understanding-wasm/part1/virtualization/" target="_blank" rel="noopener">this beautiful blog series by Chris Dickinson&lt;/a>. &lt;/p>
&lt;p>For this Java Advent, I wanted to get back to the topic &lt;strong>from a different angle&lt;/strong>. Last year we saw that, because the JVM and WebAssembly are only shallowly similar, there is friction when it comes to putting the two together. &lt;/p></description></item><item><title>WebAssembly for the Java Geek</title><link>/posts/2022/12/23/webassembly-for-the-java-geek/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>/posts/2022/12/23/webassembly-for-the-java-geek/</guid><description>&lt;div style="padding: 1em; background: #eee">
&lt;b>Update (Aug 3, 2023)&lt;/b>. This post was originally published at &lt;a href="https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html">JVM Advent&lt;/a>. If you want to read a more comprehensive guide to language VMs, I strongly recommend &lt;a href="https://www.neversaw.us/2023/05/10/understanding-wasm/part1/virtualization/">Chris Dickinson's series&lt;/a> and especially &lt;a href="https://www.neversaw.us/2023/06/30/understanding-wasm/part2/whence-wasm/">part 2&lt;/a>. If you want to see a recorded, more recent version of this content, &lt;a href="https://www.youtube.com/watch?v=PRL05TZtxpM">check out my JNation talk&lt;/a>.
&lt;/div>
&lt;p>When many Java developers hear the word WebAssembly, the first thing they think is “browser technology”. The second thing: “it’s the JVM all over again”. After all, for a Java developer, in-browser apps are &lt;strong>prehistory&lt;/strong>.&lt;/p></description></item><item><title>A History of WebAssembly</title><link>/posts/2022/11/23/a-history-of-webassembly/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>/posts/2022/11/23/a-history-of-webassembly/</guid><description>&lt;img src="https://i.imgur.com/JnJO7HZ.jpg" style="float:right" width=400/>
&lt;p>Lately there have been quite a few announcements around WebAssembly, such as the &lt;a href="https://www.docker.com/blog/docker-wasm-technical-preview/" target="_blank" rel="noopener">Docker+Wasm Technical Preview&lt;/a>. You may have started to wonder whether this technology is something you should care about.&lt;/p>
&lt;p>In this blog post, we will lightheartedly explore the history of Wasm. I will not make any claim about correctness: I may have made mistakes; in that case, feel free to contact me! I will try to motivate how we came to defining the WebAssembly standard and VM, and how they are all about providing a multi-platform, portable low-level &lt;strong>compilation target&lt;/strong> for multiple programming languages. In fact, a history of WebAssembly really is&amp;hellip;&lt;/p></description></item><item><title>Parsing A WebAssembly Binary With Kaitai Struct</title><link>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</guid><description>&lt;p>Traditionally Java libraries come with everything but the kitchen sink. In the past, people have given a lot of crap to the JavaScript ecosystem, but if there is something I envy, is how tiny some libraries are. People are still joking about &lt;a href="https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/" target="_blank" rel="noopener">left-pad&lt;/a> to this day; in reality, the JavaScript ecosystem has come a long way ever since, and I believe we have all something to learn.&lt;/p>
&lt;p>Long story short, I was looking for a Java library to parse &lt;a href="https://webassembly.github.io/spec/core/binary/index.html" target="_blank" rel="noopener">WebAssembly binaries&lt;/a>, and what I found was either a full-blown interpreter or something outdated. Then I remembered about &lt;a href="https://kaitai.io" target="_blank" rel="noopener">Kaitai Struct&lt;/a>, a parser generator for binary structures that supports a number of languages. I have read great things, but I never had a reason to try it personally; until &lt;em>now&lt;/em>.&lt;/p></description></item><item><title>Writing Envoy WASM Filters The Hardest Way (Part 2): LLVM IR</title><link>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</guid><description>&lt;p>Welcome to the next installment of the &amp;ldquo;Writing Envoy WASM Filters The Hardest Way&amp;rdquo; franchise. In this episode,
our silly hero has decided to put together the lessons learned in the &lt;a href="/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html">previous&lt;/a> &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html">episodes&lt;/a> and define an
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener">Envoy WASM filter&lt;/a> using only LLVM IR, &lt;a href="https://xkcd.com/378/" target="_blank" rel="noopener">a magnetized needle, and a steady hand&lt;/a>.&lt;/p>
&lt;p>Now that we have figured out &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html">how to write a WASM filter from scratch&lt;/a>,
the jump to LLVM IR is far smaller. We can write a source file &lt;code>llvm.ll&lt;/code>
that maps onto the correct WASM ABI pretty easily.&lt;/p></description></item><item><title>Writing Envoy WASM Filters The Hardest Way: Using WAT</title><link>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</guid><description>&lt;p>If you hadn&amp;rsquo;t noticed, I have started &lt;a href="https://evacchi.github.io/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html" target="_blank" rel="noopener">looking into WebAssembly and WASI&lt;/a>.&lt;/p>
&lt;p>Last time I was looking into the LLVM toolchain. In the last few days, I have been reading about &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener">Envoy and its WASM filters&lt;/a>. While there are a number of tutorials on how to use the &lt;a href="https://github.com/proxy-wasm/spec" target="_blank" rel="noopener">Proxy WASM SDK&lt;/a> using higher-level languages such as C++, Go, Rust, Zing and AssemblyScript, I could not find any resource on how to write a WASM extension from scratch using the canonical text format WAT and the lower-level tool &lt;a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener">&lt;code>wat2wasm&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Compiling LLVM IR into WebAssembly with WASI support</title><link>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</guid><description>&lt;p>I have been experimenting a little bit with LLVM and its WASM backend. Unfortunately, although it is easy to find examples on how to compile a &amp;ldquo;hello world&amp;rdquo; using C, resources are a bit scattered when it comes to doing something a little more specific like &lt;strong>compiling LLVM IR into WASM&lt;/strong> with &lt;a href="https://wasi.dev/" target="_blank" rel="noopener">WASI support&lt;/a>.&lt;/p>
&lt;p>I found &lt;a href="https://surma.dev/things/c-to-webassembly/" target="_blank" rel="noopener">Surma&amp;rsquo;s article on how to compile C into WASM from scratch&lt;/a> to be a very valuable resource, and &lt;a href="https://00f.net/2019/04/07/compiling-to-webassembly-with-llvm-and-clang/" target="_blank" rel="noopener">Frank Denis&amp;rsquo;s article on Compiling C to WebAssembly using clang/LLVM and WASI&lt;/a> was especially useful, even though it is now a bit outdated.&lt;/p></description></item><item><title>AWK in Java with JBang!</title><link>/posts/2022/03/01/awk-in-java-with-jbang/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>/posts/2022/03/01/awk-in-java-with-jbang/</guid><description>&lt;p>A few days ago I learned about &lt;a href="https://github.com/CZ-NIC/pz" target="_blank" rel="noopener">&lt;code>pz&lt;/code>&lt;/a>. A Python library that exposes a few simple one-letter shorthands for line-based editing of pipes at the command-line. I immediately thought there could be potential.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">This is simple and clever. The default `s` variable holds the contents of stdin. &lt;a href="https://twitter.com/jbangdev?ref_src=twsrc%5Etfw">@jbangdev&lt;/a> idea? 🤔&lt;a href="https://t.co/pBBcIfEIJb">https://t.co/pBBcIfEIJb&lt;/a>&lt;/p>&amp;mdash; Edoardo Vacchi (@evacchi) &lt;a href="https://twitter.com/evacchi/status/1492559555292766219?ref_src=twsrc%5Etfw">February 12, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>I liked the idea so I pestered &lt;a href="https://twitter.com/maxandersen" target="_blank" rel="noopener">Max Andersen&lt;/a>: what if &lt;a href="https://jbang.dev" target="_blank" rel="noopener">JBang&lt;/a> supported that kind of shorthand syntax? It turned out Max was already working on something:&lt;/p></description></item><item><title>Type You An Actor Runtime For Greater Good! (with Java 17, records, switch expressions and JBang)</title><link>/posts/2022/02/13/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>/posts/2022/02/13/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang/</guid><description>&lt;p>&lt;em>This blog post was originally published at the &lt;a href="https://www.javaadvent.com/2021/12/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang.html" target="_blank" rel="noopener">Java Advent Calendar 2021&lt;/a>&lt;/em>, so pardon all the festive references. &lt;a href="https://it.wikipedia.org/wiki/Panettone#Varianti" target="_blank" rel="noopener">San Biagio&lt;/a> was just a few days ago, but if that really bothers you, you can mentally replace all references to Panettone with &lt;a href="https://it.wikipedia.org/wiki/Frittella" target="_blank" rel="noopener">Tortelli alla crema&lt;/a> e &lt;a href="https://it.wikipedia.org/wiki/Chiacchiere" target="_blank" rel="noopener">chiacchiere&lt;/a> di &lt;a href="https://en.wikipedia.org/wiki/Carnival" target="_blank" rel="noopener">Carnevale&lt;/a>.&lt;/p>
&lt;p>The festive season is that period of the year when they tempt you to indulge in those dear sweet, sugary treats.&lt;/p>
&lt;div style="float:right">
&lt;img src="/assets/actor-3/shakespeare.png" alt="Whimsical sketch of Shakespeare" />
&lt;/div>
&lt;p>Personally, as an Italian, I do love me some &lt;a href="https://en.wikipedia.org/wiki/Panettone" target="_blank" rel="noopener">panettone&lt;/a>. And as much as I enjoy the bitter taste of Java coffee, I have been enjoying the sugar that has been introduced in the most recent versions. Indeed, I believe that Java 17 really hits the sweet spot, when it comes to treats. So what better time of the year to indulge in Java&amp;rsquo;s sweet, sweet sugar than this December?&lt;/p></description></item><item><title>Write You A Chat For Great Good! (with Java 17, actors, and JBang!)</title><link>/posts/2021/11/16/write-you-a-chat-for-great-good-with-java-17-actors-and-jbang/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>/posts/2021/11/16/write-you-a-chat-for-great-good-with-java-17-actors-and-jbang/</guid><description>&lt;p>Hello!&lt;/p>
&lt;p>Welcome back to &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener">&amp;ldquo;Learn You An Actor (System) For Great Good!&amp;rdquo;&lt;/a>. If you haven&amp;rsquo;t read &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener">the first part&lt;/a>, jump there to learn how to write a &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener">minimalistic actor runtime using Java 17&lt;/a>.&lt;/p>
&lt;p>As promised, in this second part I am showing how to write a tiny chat client/server &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener">using the runtime we wrote&lt;/a>. Then, we will run it using &lt;a href="https://jbang.dev" target="_blank" rel="noopener">JBang!&lt;/a> Next time, we will learn how to create a &lt;strong>typed&lt;/strong> version of the same actor runtime and revisit the examples!&lt;/p></description></item><item><title>Learn You An Actor (System) For Great Good! (with Java 17, records, switch expressions and JBang)</title><link>/posts/2021/10/12/learn-you-an-actor-system-for-great-good-with-java-17-records-switch-expressions-and-jbang/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/2021/10/12/learn-you-an-actor-system-for-great-good-with-java-17-records-switch-expressions-and-jbang/</guid><description>&lt;p>In 2012, &lt;a href="https://viktorklang.com/" target="_blank" rel="noopener">Viktor Klang&lt;/a> published a &lt;a href="https://gist.github.com/viktorklang/2557678" target="_blank" rel="noopener">tiny Java snippet&lt;/a> that implemented a tiny actor system in about&lt;br>
about 20 lines of code; a few years later, &lt;a href="https://gist.github.com/viktorklang/2362563" target="_blank" rel="noopener">a revised version&lt;/a> showed how to do the same in Scala.&lt;/p>
&lt;div style="float:right">
&lt;img src="/assets/actor/shakespeare.jpg" alt="Whimsical sketch of Shakespeare" />
&lt;/div>
&lt;p>I think untyped actors in the style of &lt;a href="https://doc.akka.io/docs/akka/current/actors.html" target="_blank" rel="noopener">Akka Classic&lt;/a> have always felt clunky in Java;
Java used to lack a way to express pattern matching concisely.
However, a few days ago I realized that Java 17 provides enough syntactic sugar
to write shorter actors:&lt;/p></description></item><item><title>Kogito: A Modular Codegen Design Proposal</title><link>/posts/2020/04/23/kogito-a-modular-codegen-design-proposal/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>/posts/2020/04/23/kogito-a-modular-codegen-design-proposal/</guid><description>&lt;p>My favorite topic of discussion last year was &lt;em>moving computations to compile-time&lt;/em>.&lt;/p>
&lt;div style="float:right">
&lt;img src="https://i.imgur.com/cHmSoB8.png" title="Reflection" />
&lt;/div>
&lt;p>In fact, I went to &lt;a href="https://youtu.be/TWfigR9wGsA" target="_blank" rel="noopener">a few&lt;/a> &lt;a href="https://www.youtube.com/watch?v=BUrY6On1SxM" target="_blank" rel="noopener">conferences&lt;/a> explaining how &lt;strong>moving processing out of your run-time and into build-time&lt;/strong>, is a &lt;strong>conceptually simple&lt;/strong> but &lt;strong>extremely effective way&lt;/strong> to make your applications lighter. This was sometimes received with &lt;strong>little enthusiasm&lt;/strong>: the idea itself is in fact far from new. Yet, it is key to a lot of the most interesting recent innovations in the Java ecosystem.&lt;/p></description></item><item><title>Quarking Drools</title><link>/posts/2019/03/15/quarking-drools/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/2019/03/15/quarking-drools/</guid><description>&lt;blockquote>
&lt;p>The question of whether a computer can think is no more interesting
than the question of whether a submarine can swim. (&lt;em>Edsger W.
Dijkstra&lt;/em>)&lt;/p>&lt;/blockquote>
&lt;h2 id="motivation">Motivation &lt;a href="#motivation" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>Rule-based artificial intelligence (AI) is often overlooked, possibly because people think it’s only useful in heavyweight enterprise software products. However, that’s not necessarily true. Simply put, a rule engine is just a piece of software that allows you to separate domain and business-specific constraint from the main application flow. We are part of the team developing and maintaining Drools—the world’s most popular open source rule engine and part of Red Hat—and, in this article, we will describe how we are changing Drools to make it part of the cloud and serverless revolution.&lt;/p></description></item><item><title>Be Like Water</title><link>/posts/2016/01/19/be-like-water/</link><pubDate>Tue, 19 Jan 2016 12:00:00 +0000</pubDate><guid>/posts/2016/01/19/be-like-water/</guid><description>&lt;p>Shapeless is a Scala library for &lt;a href="https://en.wikipedia.org/wiki/Generic_programming" target="_blank" rel="noopener">generic programming&lt;/a>. The name “Shapeless” comes from a famous Bruce Lee quote:&lt;/p>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t get set into one form, adapt it and build your own, and let it grow, be like water. Empty your mind, be formless, &lt;strong>shapeless&lt;/strong> — like water. Now you put water in a cup, it becomes the cup; You put water into a bottle it becomes the bottle; You put it in a teapot it becomes the teapot. Now water can flow or it can crash. Be water, my friend.&lt;/p></description></item><item><title>Python for Data Science</title><link>/posts/2015/10/07/python-for-data-science/</link><pubDate>Wed, 07 Oct 2015 12:00:00 +0000</pubDate><guid>/posts/2015/10/07/python-for-data-science/</guid><description>&lt;p>These are the slides for a talk I gave recently.&lt;/p>
&lt;p>&lt;strong>Abstract.&lt;/strong> IPython notebooks, NumPy and
Pandas data frames are the go-to tools for doing data science with Python. Spark and PySpark is rapidly becoming the &lt;em>de facto&lt;/em> standard for doing
analysis on large volumes of data. But what about CPU-intensive tasks? What about
rough numerical, but distributed computations? In the first part of this talk
I give an overview of the most interesting alternatives. The second part is
a brief roundup of the file formats for storing data for numerical analysis;
most of these file formats are language-independent.&lt;/p></description></item><item><title>Acknowledgements</title><link>/posts/2015/01/23/acknowledgements/</link><pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate><guid>/posts/2015/01/23/acknowledgements/</guid><description>&lt;p>There was a time when I used to conclude the year with a writeup on my
journal; there I drew the conclusions about the year that was coming to
an end. It was a simpler time, when &lt;em>journals&lt;/em> were not &lt;em>peer-reviewed&lt;/em>,
and when &lt;em>conclusions&lt;/em> were drawn without an extensive comparison with
the state-of-the-art. Just thoughts.&lt;/p>
&lt;p>This time, I did not. I was too involved with the final touches on this
dissertation. And a terrible fever. But mostly, the dissertation.&lt;/p></description></item></channel></rss>