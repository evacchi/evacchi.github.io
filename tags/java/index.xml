<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Middle of Nowhere</title><link>/tags/java/</link><description>Recent content in Java on Middle of Nowhere</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 05 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>A Return to WebAssembly for the Java Geek</title><link>/posts/2023/12/05/a-return-to-webassembly-for-the-java-geek/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/2023/12/05/a-return-to-webassembly-for-the-java-geek/</guid><description>&lt;p&gt;&lt;a href="https://i0.wp.com/www.javaadvent.com/content/uploads/2023/11/java-geek-wasm-2.png?ssl=1" target="_blank" rel="noopener"&gt;&lt;p class="markdown-image"&gt;
 &lt;img src="https://i0.wp.com/www.javaadvent.com/content/uploads/2023/11/java-geek-wasm-2.png?resize=600%2C369&amp;amp;ssl=1" alt="" /&gt;
&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style="padding: 1em; background: #eee"&gt;
&lt;b&gt;Update (Jun 20, 2025)&lt;/b&gt;. This post was originally published at &lt;a href="https://www.javaadvent.com/2023/12/a-return-to-webassembly-for-the-java-geek.html"&gt;JVM Advent&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;Welcome back, my dear &lt;strong&gt;Java Geek!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html" target="_blank" rel="noopener"&gt;Last year we compared WebAssembly and discussed in what ways it differs from the JVM&lt;/a&gt;. A lot of things have happened in the meantime. If you want to dive deeper into that kind of detail, I warmly suggest reading &lt;a href="https://www.neversaw.us/2023/05/10/understanding-wasm/part1/virtualization/" target="_blank" rel="noopener"&gt;this beautiful blog series by Chris Dickinson&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For this Java Advent, I wanted to get back to the topic &lt;strong&gt;from a different angle&lt;/strong&gt;. Last year we saw that, because the JVM and WebAssembly are only shallowly similar, there is friction when it comes to putting the two together. &lt;/p&gt;</description></item><item><title>WebAssembly for the Java Geek</title><link>/posts/2022/12/23/webassembly-for-the-java-geek/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>/posts/2022/12/23/webassembly-for-the-java-geek/</guid><description>&lt;div style="padding: 1em; background: #eee"&gt;
&lt;b&gt;Update (Aug 3, 2023)&lt;/b&gt;. This post was originally published at &lt;a href="https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html"&gt;JVM Advent&lt;/a&gt;. If you want to read a more comprehensive guide to language VMs, I strongly recommend &lt;a href="https://www.neversaw.us/2023/05/10/understanding-wasm/part1/virtualization/"&gt;Chris Dickinson's series&lt;/a&gt; and especially &lt;a href="https://www.neversaw.us/2023/06/30/understanding-wasm/part2/whence-wasm/"&gt;part 2&lt;/a&gt;. If you want to see a recorded, more recent version of this content, &lt;a href="https://www.youtube.com/watch?v=PRL05TZtxpM"&gt;check out my JNation talk&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;When many Java developers hear the word WebAssembly, the first thing they think is “browser technology”. The second thing: “it’s the JVM all over again”. After all, for a Java developer, in-browser apps are &lt;strong&gt;prehistory&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Type You An Actor Runtime For Greater Good! (with Java 17, records, switch expressions and JBang)</title><link>/posts/2022/02/13/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>/posts/2022/02/13/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang/</guid><description>&lt;p&gt;&lt;em&gt;This blog post was originally published at the &lt;a href="https://www.javaadvent.com/2021/12/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang.html" target="_blank" rel="noopener"&gt;Java Advent Calendar 2021&lt;/a&gt;&lt;/em&gt;, so pardon all the festive references. &lt;a href="https://it.wikipedia.org/wiki/Panettone#Varianti" target="_blank" rel="noopener"&gt;San Biagio&lt;/a&gt; was just a few days ago, but if that really bothers you, you can mentally replace all references to Panettone with &lt;a href="https://it.wikipedia.org/wiki/Frittella" target="_blank" rel="noopener"&gt;Tortelli alla crema&lt;/a&gt; e &lt;a href="https://it.wikipedia.org/wiki/Chiacchiere" target="_blank" rel="noopener"&gt;chiacchiere&lt;/a&gt; di &lt;a href="https://en.wikipedia.org/wiki/Carnival" target="_blank" rel="noopener"&gt;Carnevale&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The festive season is that period of the year when they tempt you to indulge in those dear sweet, sugary treats.&lt;/p&gt;
&lt;div style="float:right"&gt;
&lt;img src="/assets/actor-3/shakespeare.png" alt="Whimsical sketch of Shakespeare" /&gt;
&lt;/div&gt;
&lt;p&gt;Personally, as an Italian, I do love me some &lt;a href="https://en.wikipedia.org/wiki/Panettone" target="_blank" rel="noopener"&gt;panettone&lt;/a&gt;. And as much as I enjoy the bitter taste of Java coffee, I have been enjoying the sugar that has been introduced in the most recent versions. Indeed, I believe that Java 17 really hits the sweet spot, when it comes to treats. So what better time of the year to indulge in Java&amp;rsquo;s sweet, sweet sugar than this December?&lt;/p&gt;</description></item><item><title>Write You A Chat For Great Good! (with Java 17, actors, and JBang!)</title><link>/posts/2021/11/16/write-you-a-chat-for-great-good-with-java-17-actors-and-jbang/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>/posts/2021/11/16/write-you-a-chat-for-great-good-with-java-17-actors-and-jbang/</guid><description>&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;Welcome back to &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener"&gt;&amp;ldquo;Learn You An Actor (System) For Great Good!&amp;rdquo;&lt;/a&gt;. If you haven&amp;rsquo;t read &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener"&gt;the first part&lt;/a&gt;, jump there to learn how to write a &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener"&gt;minimalistic actor runtime using Java 17&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As promised, in this second part I am showing how to write a tiny chat client/server &lt;a href="https://evacchi.github.io/java/records/jbang/2021/10/12/learn-you-an-actor-system-java-17-switch-expressions.html" target="_blank" rel="noopener"&gt;using the runtime we wrote&lt;/a&gt;. Then, we will run it using &lt;a href="https://jbang.dev" target="_blank" rel="noopener"&gt;JBang!&lt;/a&gt; Next time, we will learn how to create a &lt;strong&gt;typed&lt;/strong&gt; version of the same actor runtime and revisit the examples!&lt;/p&gt;</description></item><item><title>Learn You An Actor (System) For Great Good! (with Java 17, records, switch expressions and JBang)</title><link>/posts/2021/10/12/learn-you-an-actor-system-for-great-good-with-java-17-records-switch-expressions-and-jbang/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/2021/10/12/learn-you-an-actor-system-for-great-good-with-java-17-records-switch-expressions-and-jbang/</guid><description>&lt;p&gt;In 2012, &lt;a href="https://viktorklang.com/" target="_blank" rel="noopener"&gt;Viktor Klang&lt;/a&gt; published a &lt;a href="https://gist.github.com/viktorklang/2557678" target="_blank" rel="noopener"&gt;tiny Java snippet&lt;/a&gt; that implemented a tiny actor system in about&lt;br&gt;
about 20 lines of code; a few years later, &lt;a href="https://gist.github.com/viktorklang/2362563" target="_blank" rel="noopener"&gt;a revised version&lt;/a&gt; showed how to do the same in Scala.&lt;/p&gt;
&lt;div style="float:right"&gt;
&lt;img src="/assets/actor/shakespeare.jpg" alt="Whimsical sketch of Shakespeare" /&gt;
&lt;/div&gt;
&lt;p&gt;I think untyped actors in the style of &lt;a href="https://doc.akka.io/docs/akka/current/actors.html" target="_blank" rel="noopener"&gt;Akka Classic&lt;/a&gt; have always felt clunky in Java;
Java used to lack a way to express pattern matching concisely.
However, a few days ago I realized that Java 17 provides enough syntactic sugar
to write shorter actors:&lt;/p&gt;</description></item></channel></rss>