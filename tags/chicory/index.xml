<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chicory on Middle of Nowhere</title><link>/tags/chicory/</link><description>Recent content in Chicory on Middle of Nowhere</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 03 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="/tags/chicory/index.xml" rel="self" type="application/rss+xml"/><item><title>Extending Kafka the Hard Way (Part 2)</title><link>/posts/2025/09/03/extending-kafka-the-hard-way-part-2/</link><pubDate>Wed, 03 Sep 2025 00:00:00 +0000</pubDate><guid>/posts/2025/09/03/extending-kafka-the-hard-way-part-2/</guid><description>&lt;img src="/assets/kafka/kafka-wasm-2.jpg" alt="Picture of Franz Kafka looking surprised at the Wasm Logo" width="100%"&gt;
&lt;p&gt;In &lt;a href="https://www.getxtp.com/blog/pluggable-stream-processing-with-xtp-and-kafka" target="_blank" rel="noopener"&gt;our old post about Kafka&lt;/a&gt; we described how to write a self-contained application to apply arbitrary transforms to an incoming stream of Kafka records and publish the result on a new topic.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="/posts/2025/08/25/extending-kafka-the-hard-way-part-1/"&gt;&lt;strong&gt;previous post&lt;/strong&gt;&lt;/a&gt; of this new series, we decided to embark on a new journey, towards embedding data transforms within &lt;strong&gt;the broker&lt;/strong&gt;. In this case, instead of subscribing to a stream of records and applying transforms on the client-side, transforms would be applied &lt;strong&gt;directly on the broker.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Extending Kafka the Hard Way (Part 1)</title><link>/posts/2025/08/25/extending-kafka-the-hard-way-part-1/</link><pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate><guid>/posts/2025/08/25/extending-kafka-the-hard-way-part-1/</guid><description>&lt;img src="/assets/kafka/kafka-wasm.jpg" alt="Picture of Franz Kafka looking surprised at the Wasm Logo" width="100%"&gt;
&lt;p&gt;You might have read my article about &lt;a href="https://www.getxtp.com/blog/pluggable-stream-processing-with-xtp-and-kafka" target="_blank" rel="noopener"&gt;plugging Wasm into Kafka Connect&lt;/a&gt;, but I wanted to revisit this from a different angle: what if instead of &lt;strong&gt;consuming data&lt;/strong&gt; from a topic and &lt;strong&gt;manipulating such data on the client-side,&lt;/strong&gt; we &lt;strong&gt;intercepted&lt;/strong&gt; data as it lands &lt;strong&gt;on the Kafka broker?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But first of all, &lt;strong&gt;is it possible to extend the Kafka broker at all&lt;/strong&gt;?&lt;/p&gt;</description></item><item><title>Wasm the Hard Way: Porting the Chicory Compiler to Android</title><link>/posts/2025/07/11/wasm-the-hard-way-porting-the-chicory-compiler-to-android/</link><pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate><guid>/posts/2025/07/11/wasm-the-hard-way-porting-the-chicory-compiler-to-android/</guid><description>&lt;div style="float:right; width:50%"&gt;
 &lt;img src="/assets/chicory-android/robochicory.png" alt="Robochicory" width="100%"&gt;
&lt;/div&gt;
&lt;p&gt;I am resurrecting my old &lt;a href="/tags/wasm/"&gt;&amp;ldquo;Wasm the Hard Way&amp;rdquo;&lt;/a&gt; series with some fresh new content about a recent project I have been working on: porting the &lt;a href="https://chicory.dev" target="_blank" rel="noopener"&gt;Chicory&lt;/a&gt; Wasm compiler to Android.&lt;/p&gt;
&lt;p&gt;If you are interested in Wasm and Java, you might have heard about &lt;a href="https://chicory.dev" target="_blank" rel="noopener"&gt;Chicory&lt;/a&gt;, a pure-Java Wasm runtime. Ever since I started working at &lt;a href="https://dylibso.com" target="_blank" rel="noopener"&gt;Dylibso&lt;/a&gt;, I have been contributing to the project.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://extism.org" target="_blank" rel="noopener"&gt;Extism&lt;/a&gt; is Dylibso&amp;rsquo;s family of open-source projects to develop and host WebAssembly (Wasm) plugins. Going forward, we believe the &lt;a href="https://github.com/extism/chicory-sdk" target="_blank" rel="noopener"&gt;Chicory SDK&lt;/a&gt; is a solid foundation for running Wasm modules in Java applications, making it our default Wasm runtime for Extism on the Java platform. We&amp;rsquo;re putting our money where our mouth is: the &lt;a href="https://github.com/dylibso/mcpx4j" target="_blank" rel="noopener"&gt;mcpx4j&lt;/a&gt; library for running &lt;a href="https://www.mcp.run" target="_blank" rel="noopener"&gt;mcp.run servlets&lt;/a&gt; is built on top of the Chicory SDK.&lt;/p&gt;</description></item></channel></rss>