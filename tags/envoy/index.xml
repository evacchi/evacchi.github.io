<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Envoy on Middle of Nowhere</title><link>/tags/envoy/</link><description>Recent content in Envoy on Middle of Nowhere</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 28 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/envoy/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Envoy WASM Filters The Hardest Way (Part 2): LLVM IR</title><link>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</guid><description>&lt;p>Welcome to the next installment of the &amp;ldquo;Writing Envoy WASM Filters The Hardest Way&amp;rdquo; franchise. In this episode,
our silly hero has decided to put together the lessons learned in the &lt;a href="/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html">previous&lt;/a> &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html">episodes&lt;/a> and define an
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener">Envoy WASM filter&lt;/a> using only LLVM IR, &lt;a href="https://xkcd.com/378/" target="_blank" rel="noopener">a magnetized needle, and a steady hand&lt;/a>.&lt;/p>
&lt;p>Now that we have figured out &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html">how to write a WASM filter from scratch&lt;/a>,
the jump to LLVM IR is far smaller. We can write a source file &lt;code>llvm.ll&lt;/code>
that maps onto the correct WASM ABI pretty easily.&lt;/p></description></item><item><title>Writing Envoy WASM Filters The Hardest Way: Using WAT</title><link>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</guid><description>&lt;p>If you hadn&amp;rsquo;t noticed, I have started &lt;a href="https://evacchi.github.io/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html" target="_blank" rel="noopener">looking into WebAssembly and WASI&lt;/a>.&lt;/p>
&lt;p>Last time I was looking into the LLVM toolchain. In the last few days, I have been reading about &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener">Envoy and its WASM filters&lt;/a>. While there are a number of tutorials on how to use the &lt;a href="https://github.com/proxy-wasm/spec" target="_blank" rel="noopener">Proxy WASM SDK&lt;/a> using higher-level languages such as C++, Go, Rust, Zing and AssemblyScript, I could not find any resource on how to write a WASM extension from scratch using the canonical text format WAT and the lower-level tool &lt;a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener">&lt;code>wat2wasm&lt;/code>&lt;/a>.&lt;/p></description></item></channel></rss>