<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Envoy on Middle of Nowhere</title><link>//evacchi.github.io/tags/envoy/</link><description>Recent content in Envoy on Middle of Nowhere</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 28 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="//evacchi.github.io/tags/envoy/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Envoy WASM Filters The Hardest Way (Part 2): LLVM IR</title><link>//evacchi.github.io/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>//evacchi.github.io/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</guid><description>Welcome to the next installment of the &amp;ldquo;Writing Envoy WASM Filters The Hardest Way&amp;rdquo; franchise. In this episode, our silly hero has decided to put together the lessons learned in the previous episodes and define an Envoy WASM filter using only LLVM IR, a magnetized needle, and a steady hand.
Now that we have figured out how to write a WASM filter from scratch, the jump to LLVM IR is far smaller.</description></item><item><title>Writing Envoy WASM Filters The Hardest Way: Using WAT</title><link>//evacchi.github.io/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>//evacchi.github.io/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</guid><description>If you hadn&amp;rsquo;t noticed, I have started looking into WebAssembly and WASI.
Last time I was looking into the LLVM toolchain. In the last few days, I have been reading about Envoy and its WASM filters. While there are a number of tutorials on how to use the Proxy WASM SDK using higher-level languages such as C++, Go, Rust, Zing and AssemblyScript, I could not find any resource on how to write a WASM extension from scratch using the canonical text format WAT and the lower-level tool wat2wasm.</description></item></channel></rss>