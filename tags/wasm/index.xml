<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WASM on Middle of Nowhere</title><link>/tags/wasm/</link><description>Recent content in WASM on Middle of Nowhere</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/wasm/index.xml" rel="self" type="application/rss+xml"/><item><title>A History of WebAssembly</title><link>/posts/2022/11/23/a-history-of-webassembly/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>/posts/2022/11/23/a-history-of-webassembly/</guid><description>Lately there have been quite a few announcements around WebAssembly, such as the Docker+Wasm Technical Preview. You may have started to wonder whether this technology is something you should care about.
In this blog post, we will lightheartedly explore the history of Wasm. I will not make any claim about correctness: I may have made mistakes; in that case, feel free to contact me! I will try to motivate how we came to defining the WebAssembly standard and VM, and how they are all about providing a multi-platform, portable low-level compilation target for multiple programming languages.</description></item><item><title>Parsing A WebAssembly Binary With Kaitai Struct</title><link>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</guid><description>Traditionally Java libraries come with everything but the kitchen sink. In the past, people have given a lot of crap to the JavaScript ecosystem, but if there is something I envy, is how tiny some libraries are. People are still joking about left-pad to this day; in reality, the JavaScript ecosystem has come a long way ever since, and I believe we have all something to learn.
Long story short, I was looking for a Java library to parse WebAssembly binaries, and what I found was either a full-blown interpreter or something outdated.</description></item><item><title>Writing Envoy WASM Filters The Hardest Way (Part 2): LLVM IR</title><link>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</guid><description>Welcome to the next installment of the &amp;ldquo;Writing Envoy WASM Filters The Hardest Way&amp;rdquo; franchise. In this episode, our silly hero has decided to put together the lessons learned in the previous episodes and define an Envoy WASM filter using only LLVM IR, a magnetized needle, and a steady hand.
Now that we have figured out how to write a WASM filter from scratch, the jump to LLVM IR is far smaller.</description></item><item><title>Writing Envoy WASM Filters The Hardest Way: Using WAT</title><link>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</guid><description>If you hadn&amp;rsquo;t noticed, I have started looking into WebAssembly and WASI.
Last time I was looking into the LLVM toolchain. In the last few days, I have been reading about Envoy and its WASM filters. While there are a number of tutorials on how to use the Proxy WASM SDK using higher-level languages such as C++, Go, Rust, Zing and AssemblyScript, I could not find any resource on how to write a WASM extension from scratch using the canonical text format WAT and the lower-level tool wat2wasm.</description></item><item><title>Compiling LLVM IR into WebAssembly with WASI support</title><link>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</guid><description>I have been experimenting a little bit with LLVM and its WASM backend. Unfortunately, although it is easy to find examples on how to compile a &amp;ldquo;hello world&amp;rdquo; using C, resources are a bit scattered when it comes to doing something a little more specific like compiling LLVM IR into WASM with WASI support.
I found Surma&amp;rsquo;s article on how to compile C into WASM from scratch to be a very valuable resource, and Frank Denis&amp;rsquo;s article on Compiling C to WebAssembly using clang/LLVM and WASI was especially useful, even though it is now a bit outdated.</description></item></channel></rss>