<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wasm on Middle of Nowhere</title><link>/tags/wasm/</link><description>Recent content in Wasm on Middle of Nowhere</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 23 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/wasm/index.xml" rel="self" type="application/rss+xml"/><item><title>WebAssembly for the Java Geek</title><link>/posts/2022/12/23/webassembly-for-the-java-geek/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>/posts/2022/12/23/webassembly-for-the-java-geek/</guid><description>&lt;div style="padding: 1em; background: #eee">
&lt;b>Update (Aug 3, 2023)&lt;/b>. This post was originally published at &lt;a href="https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html">JVM Advent&lt;/a>. If you want to read a more comprehensive guide to language VMs, I strongly recommend &lt;a href="https://www.neversaw.us/2023/05/10/understanding-wasm/part1/virtualization/">Chris Dickinson's series&lt;/a> and especially &lt;a href="https://www.neversaw.us/2023/06/30/understanding-wasm/part2/whence-wasm/">part 2&lt;/a>. If you want to see a recorded, more recent version of this content, &lt;a href="https://www.youtube.com/watch?v=PRL05TZtxpM">check out my JNation talk&lt;/a>.
&lt;/div>
&lt;p>When many Java developers hear the word WebAssembly, the first thing they think is “browser technology”. The second thing: “it’s the JVM all over again”. After all, for a Java developer, in-browser apps are &lt;strong>prehistory&lt;/strong>.&lt;/p></description></item><item><title>A History of WebAssembly</title><link>/posts/2022/11/23/a-history-of-webassembly/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>/posts/2022/11/23/a-history-of-webassembly/</guid><description>&lt;img src="https://i.imgur.com/JnJO7HZ.jpg" style="float:right" width=400/>
&lt;p>Lately there have been quite a few announcements around WebAssembly, such as the &lt;a href="https://www.docker.com/blog/docker-wasm-technical-preview/" target="_blank" rel="noopener">Docker+Wasm Technical Preview&lt;/a>. You may have started to wonder whether this technology is something you should care about.&lt;/p>
&lt;p>In this blog post, we will lightheartedly explore the history of Wasm. I will not make any claim about correctness: I may have made mistakes; in that case, feel free to contact me! I will try to motivate how we came to defining the WebAssembly standard and VM, and how they are all about providing a multi-platform, portable low-level &lt;strong>compilation target&lt;/strong> for multiple programming languages. In fact, a history of WebAssembly really is&amp;hellip;&lt;/p></description></item><item><title>Parsing A WebAssembly Binary With Kaitai Struct</title><link>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</guid><description>&lt;p>Traditionally Java libraries come with everything but the kitchen sink. In the past, people have given a lot of crap to the JavaScript ecosystem, but if there is something I envy, is how tiny some libraries are. People are still joking about &lt;a href="https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/" target="_blank" rel="noopener">left-pad&lt;/a> to this day; in reality, the JavaScript ecosystem has come a long way ever since, and I believe we have all something to learn.&lt;/p>
&lt;p>Long story short, I was looking for a Java library to parse &lt;a href="https://webassembly.github.io/spec/core/binary/index.html" target="_blank" rel="noopener">WebAssembly binaries&lt;/a>, and what I found was either a full-blown interpreter or something outdated. Then I remembered about &lt;a href="https://kaitai.io" target="_blank" rel="noopener">Kaitai Struct&lt;/a>, a parser generator for binary structures that supports a number of languages. I have read great things, but I never had a reason to try it personally; until &lt;em>now&lt;/em>.&lt;/p></description></item><item><title>Writing Envoy WASM Filters The Hardest Way (Part 2): LLVM IR</title><link>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</guid><description>&lt;p>Welcome to the next installment of the &amp;ldquo;Writing Envoy WASM Filters The Hardest Way&amp;rdquo; franchise. In this episode,
our silly hero has decided to put together the lessons learned in the &lt;a href="/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html">previous&lt;/a> &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html">episodes&lt;/a> and define an
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener">Envoy WASM filter&lt;/a> using only LLVM IR, &lt;a href="https://xkcd.com/378/" target="_blank" rel="noopener">a magnetized needle, and a steady hand&lt;/a>.&lt;/p>
&lt;p>Now that we have figured out &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html">how to write a WASM filter from scratch&lt;/a>,
the jump to LLVM IR is far smaller. We can write a source file &lt;code>llvm.ll&lt;/code>
that maps onto the correct WASM ABI pretty easily.&lt;/p></description></item><item><title>Writing Envoy WASM Filters The Hardest Way: Using WAT</title><link>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</guid><description>&lt;p>If you hadn&amp;rsquo;t noticed, I have started &lt;a href="https://evacchi.github.io/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html" target="_blank" rel="noopener">looking into WebAssembly and WASI&lt;/a>.&lt;/p>
&lt;p>Last time I was looking into the LLVM toolchain. In the last few days, I have been reading about &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener">Envoy and its WASM filters&lt;/a>. While there are a number of tutorials on how to use the &lt;a href="https://github.com/proxy-wasm/spec" target="_blank" rel="noopener">Proxy WASM SDK&lt;/a> using higher-level languages such as C++, Go, Rust, Zing and AssemblyScript, I could not find any resource on how to write a WASM extension from scratch using the canonical text format WAT and the lower-level tool &lt;a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener">&lt;code>wat2wasm&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Compiling LLVM IR into WebAssembly with WASI support</title><link>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</guid><description>&lt;p>I have been experimenting a little bit with LLVM and its WASM backend. Unfortunately, although it is easy to find examples on how to compile a &amp;ldquo;hello world&amp;rdquo; using C, resources are a bit scattered when it comes to doing something a little more specific like &lt;strong>compiling LLVM IR into WASM&lt;/strong> with &lt;a href="https://wasi.dev/" target="_blank" rel="noopener">WASI support&lt;/a>.&lt;/p>
&lt;p>I found &lt;a href="https://surma.dev/things/c-to-webassembly/" target="_blank" rel="noopener">Surma&amp;rsquo;s article on how to compile C into WASM from scratch&lt;/a> to be a very valuable resource, and &lt;a href="https://00f.net/2019/04/07/compiling-to-webassembly-with-llvm-and-clang/" target="_blank" rel="noopener">Frank Denis&amp;rsquo;s article on Compiling C to WebAssembly using clang/LLVM and WASI&lt;/a> was especially useful, even though it is now a bit outdated.&lt;/p></description></item></channel></rss>