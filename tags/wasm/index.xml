<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wasm on Middle of Nowhere</title><link>/tags/wasm/</link><description>Recent content in Wasm on Middle of Nowhere</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 05 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/wasm/index.xml" rel="self" type="application/rss+xml"/><item><title>A Return to WebAssembly for the Java Geek</title><link>/posts/2023/12/05/a-return-to-webassembly-for-the-java-geek/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/2023/12/05/a-return-to-webassembly-for-the-java-geek/</guid><description>&lt;p&gt;&lt;a href="https://i0.wp.com/www.javaadvent.com/content/uploads/2023/11/java-geek-wasm-2.png?ssl=1" target="_blank" rel="noopener"&gt;&lt;p class="markdown-image"&gt;
 &lt;img src="https://i0.wp.com/www.javaadvent.com/content/uploads/2023/11/java-geek-wasm-2.png?resize=600%2C369&amp;amp;ssl=1" alt="" /&gt;
&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style="padding: 1em; background: #eee"&gt;
&lt;b&gt;Update (Jun 20, 2025)&lt;/b&gt;. This post was originally published at &lt;a href="https://www.javaadvent.com/2023/12/a-return-to-webassembly-for-the-java-geek.html"&gt;JVM Advent&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;Welcome back, my dear &lt;strong&gt;Java Geek!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html" target="_blank" rel="noopener"&gt;Last year we compared WebAssembly and discussed in what ways it differs from the JVM&lt;/a&gt;. A lot of things have happened in the meantime. If you want to dive deeper into that kind of detail, I warmly suggest reading &lt;a href="https://www.neversaw.us/2023/05/10/understanding-wasm/part1/virtualization/" target="_blank" rel="noopener"&gt;this beautiful blog series by Chris Dickinson&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For this Java Advent, I wanted to get back to the topic &lt;strong&gt;from a different angle&lt;/strong&gt;. Last year we saw that, because the JVM and WebAssembly are only shallowly similar, there is friction when it comes to putting the two together. &lt;/p&gt;</description></item><item><title>WebAssembly for the Java Geek</title><link>/posts/2022/12/23/webassembly-for-the-java-geek/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>/posts/2022/12/23/webassembly-for-the-java-geek/</guid><description>&lt;div style="padding: 1em; background: #eee"&gt;
&lt;b&gt;Update (Aug 3, 2023)&lt;/b&gt;. This post was originally published at &lt;a href="https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html"&gt;JVM Advent&lt;/a&gt;. If you want to read a more comprehensive guide to language VMs, I strongly recommend &lt;a href="https://www.neversaw.us/2023/05/10/understanding-wasm/part1/virtualization/"&gt;Chris Dickinson's series&lt;/a&gt; and especially &lt;a href="https://www.neversaw.us/2023/06/30/understanding-wasm/part2/whence-wasm/"&gt;part 2&lt;/a&gt;. If you want to see a recorded, more recent version of this content, &lt;a href="https://www.youtube.com/watch?v=PRL05TZtxpM"&gt;check out my JNation talk&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;When many Java developers hear the word WebAssembly, the first thing they think is “browser technology”. The second thing: “it’s the JVM all over again”. After all, for a Java developer, in-browser apps are &lt;strong&gt;prehistory&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>A History of WebAssembly</title><link>/posts/2022/11/23/a-history-of-webassembly/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>/posts/2022/11/23/a-history-of-webassembly/</guid><description>&lt;img src="https://i.imgur.com/JnJO7HZ.jpg" style="float:right" width=400/&gt;
&lt;p&gt;Lately there have been quite a few announcements around WebAssembly, such as the &lt;a href="https://www.docker.com/blog/docker-wasm-technical-preview/" target="_blank" rel="noopener"&gt;Docker+Wasm Technical Preview&lt;/a&gt;. You may have started to wonder whether this technology is something you should care about.&lt;/p&gt;
&lt;p&gt;In this blog post, we will lightheartedly explore the history of Wasm. I will not make any claim about correctness: I may have made mistakes; in that case, feel free to contact me! I will try to motivate how we came to defining the WebAssembly standard and VM, and how they are all about providing a multi-platform, portable low-level &lt;strong&gt;compilation target&lt;/strong&gt; for multiple programming languages. In fact, a history of WebAssembly really is&amp;hellip;&lt;/p&gt;</description></item><item><title>Parsing A WebAssembly Binary With Kaitai Struct</title><link>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</guid><description>&lt;p&gt;Traditionally Java libraries come with everything but the kitchen sink. In the past, people have given a lot of crap to the JavaScript ecosystem, but if there is something I envy, is how tiny some libraries are. People are still joking about &lt;a href="https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/" target="_blank" rel="noopener"&gt;left-pad&lt;/a&gt; to this day; in reality, the JavaScript ecosystem has come a long way ever since, and I believe we have all something to learn.&lt;/p&gt;
&lt;p&gt;Long story short, I was looking for a Java library to parse &lt;a href="https://webassembly.github.io/spec/core/binary/index.html" target="_blank" rel="noopener"&gt;WebAssembly binaries&lt;/a&gt;, and what I found was either a full-blown interpreter or something outdated. Then I remembered about &lt;a href="https://kaitai.io" target="_blank" rel="noopener"&gt;Kaitai Struct&lt;/a&gt;, a parser generator for binary structures that supports a number of languages. I have read great things, but I never had a reason to try it personally; until &lt;em&gt;now&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>Writing Envoy WASM Filters The Hardest Way (Part 2): LLVM IR</title><link>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</guid><description>&lt;p&gt;Welcome to the next installment of the &amp;ldquo;Writing Envoy WASM Filters The Hardest Way&amp;rdquo; franchise. In this episode,
our silly hero has decided to put together the lessons learned in the &lt;a href="/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html"&gt;previous&lt;/a&gt; &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html"&gt;episodes&lt;/a&gt; and define an
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener"&gt;Envoy WASM filter&lt;/a&gt; using only LLVM IR, &lt;a href="https://xkcd.com/378/" target="_blank" rel="noopener"&gt;a magnetized needle, and a steady hand&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we have figured out &lt;a href="/envoy/wasm/wat/2022/04/23/envoy-wasm-filters-the-hardest-way-using-wat.html"&gt;how to write a WASM filter from scratch&lt;/a&gt;,
the jump to LLVM IR is far smaller. We can write a source file &lt;code&gt;llvm.ll&lt;/code&gt;
that maps onto the correct WASM ABI pretty easily.&lt;/p&gt;</description></item><item><title>Writing Envoy WASM Filters The Hardest Way: Using WAT</title><link>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</guid><description>&lt;p&gt;If you hadn&amp;rsquo;t noticed, I have started &lt;a href="https://evacchi.github.io/llvm/wasm/wasi/2022/04/14/compiling-llvm-ir-into-wasm.html" target="_blank" rel="noopener"&gt;looking into WebAssembly and WASI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last time I was looking into the LLVM toolchain. In the last few days, I have been reading about &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/wasm-cc" target="_blank" rel="noopener"&gt;Envoy and its WASM filters&lt;/a&gt;. While there are a number of tutorials on how to use the &lt;a href="https://github.com/proxy-wasm/spec" target="_blank" rel="noopener"&gt;Proxy WASM SDK&lt;/a&gt; using higher-level languages such as C++, Go, Rust, Zing and AssemblyScript, I could not find any resource on how to write a WASM extension from scratch using the canonical text format WAT and the lower-level tool &lt;a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener"&gt;&lt;code&gt;wat2wasm&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Compiling LLVM IR into WebAssembly with WASI support</title><link>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</guid><description>&lt;p&gt;I have been experimenting a little bit with LLVM and its WASM backend. Unfortunately, although it is easy to find examples on how to compile a &amp;ldquo;hello world&amp;rdquo; using C, resources are a bit scattered when it comes to doing something a little more specific like &lt;strong&gt;compiling LLVM IR into WASM&lt;/strong&gt; with &lt;a href="https://wasi.dev/" target="_blank" rel="noopener"&gt;WASI support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I found &lt;a href="https://surma.dev/things/c-to-webassembly/" target="_blank" rel="noopener"&gt;Surma&amp;rsquo;s article on how to compile C into WASM from scratch&lt;/a&gt; to be a very valuable resource, and &lt;a href="https://00f.net/2019/04/07/compiling-to-webassembly-with-llvm-and-clang/" target="_blank" rel="noopener"&gt;Frank Denis&amp;rsquo;s article on Compiling C to WebAssembly using clang/LLVM and WASI&lt;/a&gt; was especially useful, even though it is now a bit outdated.&lt;/p&gt;</description></item></channel></rss>