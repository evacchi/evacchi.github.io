<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Middle of Nowhere</title><link>http://evacchi.github.io/</link><description>Recent content on Middle of Nowhere</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://evacchi.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>A History of WebAssembly</title><link>http://evacchi.github.io/posts/2022/11/23/a-history-of-webassembly/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2022/11/23/a-history-of-webassembly/</guid><description>Lately there have been quite a few announcements around WebAssembly, such as the Docker+Wasm Technical Preview. You may have started to wonder whether this technology is something you should care about.
In this blog post, we will lightheartedly explore the history of Wasm. I will not make any claim about correctness: I may have made mistakes; in that case, feel free to contact me! I will try to motivate how we came to defining the WebAssembly standard and VM, and how they are all about providing a multi-platform, portable low-level compilation target for multiple programming languages.</description></item><item><title>Parsing A WebAssembly Binary With Kaitai Struct</title><link>http://evacchi.github.io/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2022/05/09/parsing-a-webassembly-binary-with-kaitai-struct/</guid><description>Traditionally Java libraries come with everything but the kitchen sink. In the past, people have given a lot of crap to the JavaScript ecosystem, but if there is something I envy, is how tiny some libraries are. People are still joking about left-pad to this day; in reality, the JavaScript ecosystem has come a long way ever since, and I believe we have all something to learn.
Long story short, I was looking for a Java library to parse WebAssembly binaries, and what I found was either a full-blown interpreter or something outdated.</description></item><item><title>Writing Envoy WASM Filters The Hardest Way (Part 2): LLVM IR</title><link>http://evacchi.github.io/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2022/04/28/writing-envoy-wasm-filters-the-hardest-way-part-2-llvm-ir/</guid><description>Welcome to the next installment of the &amp;ldquo;Writing Envoy WASM Filters The Hardest Way&amp;rdquo; franchise. In this episode, our silly hero has decided to put together the lessons learned in the previous episodes and define an Envoy WASM filter using only LLVM IR, a magnetized needle, and a steady hand.
Now that we have figured out how to write a WASM filter from scratch, the jump to LLVM IR is far smaller.</description></item><item><title>Writing Envoy WASM Filters The Hardest Way: Using WAT</title><link>http://evacchi.github.io/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2022/04/23/writing-envoy-wasm-filters-the-hardest-way-using-wat/</guid><description>If you hadn&amp;rsquo;t noticed, I have started looking into WebAssembly and WASI.
Last time I was looking into the LLVM toolchain. In the last few days, I have been reading about Envoy and its WASM filters. While there are a number of tutorials on how to use the Proxy WASM SDK using higher-level languages such as C++, Go, Rust, Zing and AssemblyScript, I could not find any resource on how to write a WASM extension from scratch using the canonical text format WAT and the lower-level tool wat2wasm.</description></item><item><title>Compiling LLVM IR into WebAssembly with WASI support</title><link>http://evacchi.github.io/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2022/04/14/compiling-llvm-ir-into-webassembly-with-wasi-support/</guid><description>I have been experimenting a little bit with LLVM and its WASM backend. Unfortunately, although it is easy to find examples on how to compile a &amp;ldquo;hello world&amp;rdquo; using C, resources are a bit scattered when it comes to doing something a little more specific like compiling LLVM IR into WASM with WASI support.
I found Surma&amp;rsquo;s article on how to compile C into WASM from scratch to be a very valuable resource, and Frank Denis&amp;rsquo;s article on Compiling C to WebAssembly using clang/LLVM and WASI was especially useful, even though it is now a bit outdated.</description></item><item><title>AWK in Java with JBang!</title><link>http://evacchi.github.io/posts/2022/03/01/awk-in-java-with-jbang/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2022/03/01/awk-in-java-with-jbang/</guid><description>A few days ago I learned about pz. A Python library that exposes a few simple one-letter shorthands for line-based editing of pipes at the command-line. I immediately thought there could be potential.
This is simple and clever. The default `s` variable holds the contents of stdin. @jbangdev idea? 🤔https://t.co/pBBcIfEIJb
&amp;mdash; Edoardo Vacchi (@evacchi) February 12, 2022 I liked the idea so I pestered Max Andersen: what if JBang supported that kind of shorthand syntax?</description></item><item><title>Type You An Actor Runtime For Greater Good! (with Java 17, records, switch expressions and JBang)</title><link>http://evacchi.github.io/posts/2022/02/13/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2022/02/13/type-you-an-actor-runtime-for-greater-good-with-java-17-records-switch-expressions-and-jbang/</guid><description>This blog post was originally published at the Java Advent Calendar 2021, so pardon all the festive references. San Biagio was just a few days ago, but if that really bothers you, you can mentally replace all references to Panettone with Tortelli alla crema e chiacchiere di Carnevale.
The festive season is that period of the year when they tempt you to indulge in those dear sweet, sugary treats.
Personally, as an Italian, I do love me some panettone.</description></item><item><title>Write You A Chat For Great Good! (with Java 17, actors, and JBang!)</title><link>http://evacchi.github.io/posts/2021/11/16/write-you-a-chat-for-great-good-with-java-17-actors-and-jbang/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2021/11/16/write-you-a-chat-for-great-good-with-java-17-actors-and-jbang/</guid><description>Hello!
Welcome back to &amp;ldquo;Learn You An Actor (System) For Great Good!&amp;rdquo;. If you haven&amp;rsquo;t read the first part, jump there to learn how to write a minimalistic actor runtime using Java 17.
As promised, in this second part I am showing how to write a tiny chat client/server using the runtime we wrote. Then, we will run it using JBang! Next time, we will learn how to create a typed version of the same actor runtime and revisit the examples!</description></item><item><title>Learn You An Actor (System) For Great Good! (with Java 17, records, switch expressions and JBang)</title><link>http://evacchi.github.io/posts/2021/10/12/learn-you-an-actor-system-for-great-good-with-java-17-records-switch-expressions-and-jbang/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2021/10/12/learn-you-an-actor-system-for-great-good-with-java-17-records-switch-expressions-and-jbang/</guid><description>In 2012, Viktor Klang published a tiny Java snippet that implemented a tiny actor system in about
about 20 lines of code; a few years later, a revised version showed how to do the same in Scala.
I think untyped actors in the style of Akka Classic have always felt clunky in Java; Java used to lack a way to express pattern matching concisely. However, a few days ago I realized that Java 17 provides enough syntactic sugar to write shorter actors:</description></item><item><title>Kogito: A Modular Codegen Design Proposal</title><link>http://evacchi.github.io/posts/2020/04/23/kogito-a-modular-codegen-design-proposal/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2020/04/23/kogito-a-modular-codegen-design-proposal/</guid><description>My favorite topic of discussion last year was moving computations to compile-time.
In fact, I went to a few conferences explaining how moving processing out of your run-time and into build-time, is a conceptually simple but extremely effective way to make your applications lighter. This was sometimes received with little enthusiasm: the idea itself is in fact far from new. Yet, it is key to a lot of the most interesting recent innovations in the Java ecosystem.</description></item><item><title>Quarking Drools</title><link>http://evacchi.github.io/posts/2019/03/15/quarking-drools/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2019/03/15/quarking-drools/</guid><description>The question of whether a computer can think is no more interesting than the question of whether a submarine can swim. (Edsger W. Dijkstra)
Motivation 🔗Rule-based artificial intelligence (AI) is often overlooked, possibly because people think it’s only useful in heavyweight enterprise software products. However, that’s not necessarily true. Simply put, a rule engine is just a piece of software that allows you to separate domain and business-specific constraint from the main application flow.</description></item><item><title>Be Like Water</title><link>http://evacchi.github.io/posts/2016/01/19/be-like-water/</link><pubDate>Tue, 19 Jan 2016 12:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2016/01/19/be-like-water/</guid><description>Shapeless is a Scala library for generic programming. The name “Shapeless” comes from a famous Bruce Lee quote:
Don&amp;rsquo;t get set into one form, adapt it and build your own, and let it grow, be like water. Empty your mind, be formless, shapeless — like water. Now you put water in a cup, it becomes the cup; You put water into a bottle it becomes the bottle; You put it in a teapot it becomes the teapot.</description></item><item><title>Python for Data Science</title><link>http://evacchi.github.io/posts/2015/10/07/python-for-data-science/</link><pubDate>Wed, 07 Oct 2015 12:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2015/10/07/python-for-data-science/</guid><description>These are the slides for a talk I gave recently.
Abstract. IPython notebooks, NumPy and Pandas data frames are the go-to tools for doing data science with Python. Spark and PySpark is rapidly becoming the de facto standard for doing analysis on large volumes of data. But what about CPU-intensive tasks? What about rough numerical, but distributed computations? In the first part of this talk I give an overview of the most interesting alternatives.</description></item><item><title>Acknowledgements</title><link>http://evacchi.github.io/posts/2015/01/23/acknowledgements/</link><pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate><guid>http://evacchi.github.io/posts/2015/01/23/acknowledgements/</guid><description>There was a time when I used to conclude the year with a writeup on my journal; there I drew the conclusions about the year that was coming to an end. It was a simpler time, when journals were not peer-reviewed, and when conclusions were drawn without an extensive comparison with the state-of-the-art. Just thoughts.
This time, I did not. I was too involved with the final touches on this dissertation.</description></item></channel></rss>